from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

from datetime import datetime
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '8080518586:AAGyBh5VBYNBbyji8rbQPnHz40Psz70rf0g'
ADMIN_ID = 1393947995

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è callback_data
DELETE_PREFIX = "del_"
ASSIGN_HW_PREFIX = "hw_"
APPROVE_PREFIX = "approve_"
REJECT_PREFIX = "reject_"
MENTOR_PREFIX = "mentor_"
CHANGE_MENTOR_PREFIX = "change_mentor_"
ROLE_PREFIX = "role_"
REVIEW_PREFIX = "review_"
TASK_PREFIX = "task_"
SUBMISSION_PREFIX = "sub_"

# –°–æ—Å—Ç–æ—è–Ω–∏—è
REGISTER_STATES = {
    'START': 0,
    'NAME': 1,
    'FAMILY_NAME': 2,
    'WAIT_APPROVAL': 3
}

ASSIGN_HW_STATES = {
    'SELECT_STUDENT': 0,
    'RECEIVE_FILE': 1,
    'RECEIVE_DEADLINE': 2
}

SEND_TASK_STATES = {
    'SELECT_DEADLINE': 0,
    'RECEIVE_FILES': 1,
    'RECEIVE_COMMENT': 2
}

REVIEW_STATES = {
    'SELECT_SUBMISSION': 0,
    'RECEIVE_REVIEW': 1
}

class User:
    def __init__(self, chat_id, name, family_name, role, mentor_id=None, username=None):
        self.chat_id = chat_id
        self.name = name
        self.family_name = family_name
        self.role = role  # 'admin', 'mentor' –∏–ª–∏ 'student'
        self.mentor_id = mentor_id
        self.username = username
        self.is_active = True

    def full_name(self):
        return f"{self.name} {self.family_name}"

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
registered_users = []
pending_registrations = {}
user_homeworks = {}
submitted_tasks = {}
task_reviews = {}

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

def find_user(chat_id):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id"""
    return next((u for u in registered_users if u.chat_id == chat_id and u.is_active), None)

def get_active_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return [u for u in registered_users if u.is_active]

def get_students_for_mentor(mentor_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞"""
    return [u for u in get_active_users() if u.role == 'student' and u.mentor_id == mentor_id]

def get_mentors():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤"""
    return [u for u in get_active_users() if u.role == 'mentor']

def format_deadline(deadline_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    try:
        deadline = datetime.strptime(deadline_str, "%d.%m.%Y %H:%M")
        return deadline.strftime("%d %b %Y –≤ %H:%M")
    except ValueError:
        return deadline_str

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
    user = find_user(update.effective_user.id)
    
    if user:
        if user.role == 'admin':
            commands = [
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "/show_users - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "/delete_user - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "/assign_homework - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
                "/change_mentor - –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞ —É—á–µ–Ω–∏–∫—É",
                "/review_tasks - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è",
                "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
            ]
        elif user.role == 'mentor':
            commands = [
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "/show_my_students - –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏",
                "/review_tasks - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è",
                "/assign_homework - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å–≤–æ–∏–º —É—á–µ–Ω–∏–∫–∞–º",
                "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
            ]
        else:  # student
            commands = [
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "/send_task - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
                "/my_deadlines - –ú–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã",
                "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
            ]
        
        help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(commands)
        help_text += "\n\n‚ö†Ô∏è –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /cancel —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        await update.message.reply_text(help_text)
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )


# ========== –°–ò–°–¢–ï–ú–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ==========

async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º —Å–±—Ä–æ—Å–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.clear()
    
    # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user_id in pending_registrations:
        del pending_registrations[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    existing_user = next((u for u in registered_users if u.chat_id == user_id and u.is_active), None)
    if existing_user:
        await update.message.reply_text(
            f"‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {existing_user.role}!\n"
            f"–ò–º—è: {existing_user.full_name()}"
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n\n"
        "‚ÑπÔ∏è –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    return REGISTER_STATES['NAME']

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name = update.message.text.strip()
    if not name or len(name) > 50:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return REGISTER_STATES['NAME']
    
    context.user_data['name'] = name
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return REGISTER_STATES['FAMILY_NAME']

async def register_family_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    family_name = update.message.text.strip()
    if not family_name or len(family_name) > 50:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return REGISTER_STATES['FAMILY_NAME']
    
    user_id = update.effective_user.id
    context.user_data['family_name'] = family_name
    
    pending_registrations[user_id] = {
        'name': context.user_data['name'],
        'family_name': context.user_data['family_name'],
        'chat_id': user_id,
        'username': update.effective_user.username
    }
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"{APPROVE_PREFIX}{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"{REJECT_PREFIX}{user_id}")
        ]
    ]
    
    await context.bot.send_message(
        ADMIN_ID,
        f"üìù –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üë• –§–∞–º–∏–ª–∏—è: {context.user_data['family_name']}\n"
        f"üÜî ID: {user_id}\n"
        f"üìõ Username: @{update.effective_user.username or '–Ω–µ—Ç'}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    await update.message.reply_text(
        "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. "
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∞—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç."
    )
    return REGISTER_STATES['WAIT_APPROVAL']

async def register_user_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª–µ–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user_id in pending_registrations:
        del pending_registrations[user_id]
    
    context.user_data.clear()
    
    await update.message.reply_text(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /register"
    )
    return ConversationHandler.END

async def approve_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data.startswith(REJECT_PREFIX):
            user_id = int(query.data[len(REJECT_PREFIX):])
            if user_id in pending_registrations:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.send_message(
                    user_id,
                    "‚ùå –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /register"
                )
                del pending_registrations[user_id]
                await query.edit_message_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            else:
                await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        
        elif query.data.startswith(APPROVE_PREFIX):
            user_id = int(query.data[len(APPROVE_PREFIX):])
            if user_id not in pending_registrations:
                await query.edit_message_text("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (/register)")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
            keyboard = [
                [InlineKeyboardButton("–ê–¥–º–∏–Ω", callback_data=f"{ROLE_PREFIX}admin_{user_id}")],
                [InlineKeyboardButton("–ú–µ–Ω—Ç–æ—Ä", callback_data=f"{ROLE_PREFIX}mentor_{user_id}")],
                [InlineKeyboardButton("–£—á–µ–Ω–∏–∫", callback_data=f"{ROLE_PREFIX}student_{user_id}")]
            ]
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

async def assign_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    try:
        _, role, user_id = query.data.split('_')
        user_id = int(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        if user_id not in pending_registrations:
            await query.edit_message_text("‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (/register)")
            return
        
        user_data = pending_registrations[user_id]
        
        if role == 'student':
            mentors = [u for u in registered_users if u.role == 'mentor' and u.is_active]
            if not mentors:
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤! –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞.")
                return
            
            keyboard = [
                [InlineKeyboardButton(
                    f"{m.full_name()} (@{m.username})" if m.username else m.full_name(),
                    callback_data=f"{MENTOR_PREFIX}{user_id}_{m.chat_id}"
                )] for m in mentors
            ]
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –º–µ–Ω—Ç–æ—Ä–∞
            new_user = User(
                chat_id=user_id,
                name=user_data['name'],
                family_name=user_data['family_name'],
                role=role,
                username=user_data.get('username')
            )
            registered_users.append(new_user)
            del pending_registrations[user_id]
            
            role_name = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if role == 'admin' else "–º–µ–Ω—Ç–æ—Ä"
            await context.bot.send_message(
                user_id, 
                f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role_name}!"
            )
            await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {role}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

async def assign_mentor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞ –∫ —É—á–µ–Ω–∏–∫—É"""
    query = update.callback_query
    await query.answer()
    
    _, student_id, mentor_id = query.data.split('_')
    student_id = int(student_id)
    mentor_id = int(mentor_id)
    user_data = pending_registrations.get(student_id)
    
    if not user_data:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = User(
        chat_id=student_id,
        name=user_data['name'],
        family_name=user_data['family_name'],
        role='student',
        mentor_id=mentor_id,
        username=user_data.get('username')
    )
    registered_users.append(new_user)
    del pending_registrations[student_id]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞ –∏ –º–µ–Ω—Ç–æ—Ä–∞
    mentor = find_user(mentor_id)
    await context.bot.send_message(
        student_id, 
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n"
        f"–í–∞—à –º–µ–Ω—Ç–æ—Ä: {mentor.full_name()}"
        f"{' (@' + mentor.username + ')' if mentor.username else ''}"
    )
    
    await context.bot.send_message(
        mentor_id, 
        f"üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π —É—á–µ–Ω–∏–∫:\n"
        f"üë§ –ò–º—è: {new_user.full_name()}\n"
        f"üÜî ID: {new_user.chat_id}\n"
        f"üìõ Username: @{new_user.username if new_user.username else '–Ω–µ—Ç'}"
    )
    
    await query.edit_message_text(
        f"‚úÖ –£—á–µ–Ω–∏–∫ {new_user.full_name()} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
        f"–ú–µ–Ω—Ç–æ—Ä: {mentor.full_name()}"
    )

# ========== –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –î–û–ú–ê–®–ù–ï–ì–û –ó–ê–î–ê–ù–ò–Ø ==========

async def assign_homework(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    user = find_user(update.effective_user.id)
    if not user or user.role not in ['admin', 'mentor']:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –º–µ–Ω—Ç–æ—Ä–∞–º.")
        return
    
    students = []
    if user.role == 'admin':
        students = [u for u in get_active_users() if u.role == 'student']
    else:  # mentor
        students = get_students_for_mentor(user.chat_id)
    
    if not students:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.")
        return
    
    keyboard = [
        [InlineKeyboardButton(
            f"{s.full_name()} (@{s.username})" if s.username else s.full_name(),
            callback_data=f"{ASSIGN_HW_PREFIX}{s.chat_id}"
        )]
        for s in students
    ]
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:\n\n"
        "‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASSIGN_HW_STATES['SELECT_STUDENT']

async def select_student_for_homework(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    student_id = int(query.data[len(ASSIGN_HW_PREFIX):])
    student = find_user(student_id)
    
    if not student:
        await query.edit_message_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    context.user_data['student_id'] = student_id
    context.user_data['student_name'] = student.full_name()
    
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–µ–Ω–∏–∫–∞: {student.full_name()}\n"
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º (PDF, Word, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
    )
    return ASSIGN_HW_STATES['RECEIVE_FILE']

async def receive_homework_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏—è"""
    file_info = None
    if update.message.document:
        file_info = {
            'file_id': update.message.document.file_id,
            'file_type': 'document',
            'file_name': update.message.document.file_name
        }
    elif update.message.photo:
        file_info = {
            'file_id': update.message.photo[-1].file_id,
            'file_type': 'photo'
        }
    elif update.message.text:
        file_info = {
            'file_type': 'text',
            'text': update.message.text
        }
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.")
        return ASSIGN_HW_STATES['RECEIVE_FILE']
    
    context.user_data['hw_file'] = file_info
    await update.message.reply_text(
        "üìé –ó–∞–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 31.12.2023 23:59):"
    )
    return ASSIGN_HW_STATES['RECEIVE_DEADLINE']

async def receive_homework_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    deadline_text = update.message.text.strip()
    student_id = context.user_data.get('student_id')
    hw_file = context.user_data.get('hw_file')
    student_name = context.user_data.get('student_name')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    if not re.match(r'^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}$', deadline_text):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 31.12.2023 23:59)")
        return ASSIGN_HW_STATES['RECEIVE_DEADLINE']
    
    try:
        deadline = datetime.strptime(deadline_text, "%d.%m.%Y %H:%M")
        if deadline < datetime.now():
            await update.message.reply_text("‚ùå –î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É.")
            return ASSIGN_HW_STATES['RECEIVE_DEADLINE']
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
        return ASSIGN_HW_STATES['RECEIVE_DEADLINE']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
    if student_id not in user_homeworks:
        user_homeworks[student_id] = []
    
    task_id = f"task_{datetime.now().timestamp()}"
    user_homeworks[student_id].append({
        'task_id': task_id,
        'deadline': deadline_text,
        'file_info': hw_file,
        'assigned_by': update.effective_user.id,
        'assigned_at': datetime.now().strftime("%d.%m.%Y %H:%M")
    })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
    try:
        student = find_user(student_id)
        if not student:
            await update.message.reply_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
        
        caption = (
            f"üìå –ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
            f"–î–µ–¥–ª–∞–π–Ω: {format_deadline(deadline_text)}\n"
            f"–û—Ç: {update.effective_user.full_name}"
        )
        
        if hw_file['file_type'] == 'document':
            await context.bot.send_document(
                student_id,
                document=hw_file['file_id'],
                caption=caption
            )
        elif hw_file['file_type'] == 'photo':
            await context.bot.send_photo(
                student_id,
                photo=hw_file['file_id'],
                caption=caption
            )
        else:  # text
            await context.bot.send_message(
                student_id,
                text=f"{caption}\n\n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n{hw_file['text']}"
            )
        
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —É—á–µ–Ω–∏–∫—É {student_name}!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫—É.")
    
    return ConversationHandler.END

# ========== –°–ò–°–¢–ï–ú–ê –°–î–ê–ß–ò –ó–ê–î–ê–ù–ò–ô ==========

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤
async def show_deadlines(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É—á–µ–Ω–∏–∫–æ–≤ (–¥–ª—è –º–µ–Ω—Ç–æ—Ä–æ–≤)"""
    user = find_user(update.effective_user.id)
    
    if not user:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
        return
    
    if user.role == 'student':
        # –î–ª—è —É—á–µ–Ω–∏–∫–∞ - —Ç–æ–ª—å–∫–æ –µ–≥–æ –¥–µ–¥–ª–∞–π–Ω—ã
        if user.chat_id in user_homeworks and user_homeworks[user.chat_id]:
            deadlines = []
            for hw in user_homeworks[user.chat_id]:
                deadline = format_deadline(hw['deadline'])
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if datetime.now() < datetime.strptime(hw['deadline'], "%d.%m.%Y %H:%M") else "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
                deadlines.append(f"‚Ä¢ {deadline} - {status}")
            
            text = "üìÖ –í–∞—à–∏ –¥–µ–¥–ª–∞–π–Ω—ã:\n" + "\n".join(deadlines)
            text += "\n\n–î–ª—è —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send_task"
        else:
            text = "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."
        
        await update.message.reply_text(text)
    
    elif user.role == 'mentor':
        # –î–ª—è –º–µ–Ω—Ç–æ—Ä–∞ - –¥–µ–¥–ª–∞–π–Ω—ã –µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤
        students = get_students_for_mentor(user.chat_id)
        if not students:
            await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
            return
        
        text = "üìÖ –î–µ–¥–ª–∞–π–Ω—ã –≤–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤:\n"
        for student in students:
            if student.chat_id in user_homeworks and user_homeworks[student.chat_id]:
                student_deadlines = []
                for hw in user_homeworks[student.chat_id]:
                    deadline = format_deadline(hw['deadline'])
                    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if datetime.now() < datetime.strptime(hw['deadline'], "%d.%m.%Y %H:%M") else "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
                    student_deadlines.append(f"  ‚Ä¢ {deadline} - {status}")
                
                text += f"\nüë§ {student.full_name()}:\n" + "\n".join(student_deadlines)
            else:
                text += f"\nüë§ {student.full_name()}: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"
        
        text += "\n\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /review_tasks"
        await update.message.reply_text(text)
    
    else:  # admin
        # –î–ª—è –∞–¥–º–∏–Ω–∞ - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã
        active_hw = {}
        for student_id, assignments in user_homeworks.items():
            student = find_user(student_id)
            if student:
                for hw in assignments:
                    if hw['task_id'] not in active_hw:
                        active_hw[hw['task_id']] = {
                            'deadline': hw['deadline'],
                            'students': []
                        }
                    active_hw[hw['task_id']]['students'].append(student.full_name())
        
        if not active_hw:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —É —É—á–µ–Ω–∏–∫–æ–≤.")
            return
        
        text = "üìÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã:\n"
        for task_id, data in active_hw.items():
            deadline = format_deadline(data['deadline'])
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if datetime.now() < datetime.strptime(data['deadline'], "%d.%m.%Y %H:%M") else "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
            text += f"\n‚Ä¢ {deadline} - {status}\n"
            text += "  üë• –£—á–µ–Ω–∏–∫–∏: " + ", ".join(data['students'])
        
        await update.message.reply_text(text)


async def send_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    user = find_user(user_id)
    
    if not user:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")
        return ConversationHandler.END
    
    if user_id not in user_homeworks or not user_homeworks[user_id]:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å–¥–∞—á–∏.")
        return ConversationHandler.END
    
    keyboard = []
    for idx, hw in enumerate(user_homeworks[user_id]):
        deadline_text = format_deadline(hw['deadline'])
        keyboard.append([
            InlineKeyboardButton(
                f"{idx+1}. –î–µ–¥–ª–∞–π–Ω: {deadline_text}",
                callback_data=f"deadline_{idx}"
            )
        ])
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–¥–∞—á–∏:\n\n"
        "‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SEND_TASK_STATES['SELECT_DEADLINE']

async def select_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–¥–∞—á–∏"""
    query = update.callback_query
    await query.answer()
    
    deadline_idx = int(query.data.split('_')[1])
    user_id = query.from_user.id
    
    if user_id not in user_homeworks or deadline_idx >= len(user_homeworks[user_id]):
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    task = user_homeworks[user_id][deadline_idx]
    context.user_data.update({
        'selected_deadline_idx': deadline_idx,
        'task_id': task['task_id'],
        'deadline': task['deadline'],
        'files': []
    })
    
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º: {format_deadline(task['deadline'])}\n\n"
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º (—Ñ–æ—Ç–æ, PDF –∏ —Ç.–¥.). "
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /done_files"
    )
    return SEND_TASK_STATES['RECEIVE_FILES']

async def receive_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–∏—è"""
    if update.message.document:
        file_type = 'document'
        file_id = update.message.document.file_id
        file_name = update.message.document.file_name
    elif update.message.photo:
        file_type = 'photo'
        file_id = update.message.photo[-1].file_id
        file_name = None
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã).")
        return SEND_TASK_STATES['RECEIVE_FILES']
    
    context.user_data.setdefault('files', []).append({
        'type': file_type,
        'id': file_id,
        'name': file_name
    })
    
    await update.message.reply_text(
        f"üìé {'–î–æ–∫—É–º–µ–Ω—Ç' if file_type == 'document' else '–§–æ—Ç–æ'} "
        f"{'(' + file_name + ')' if file_name else ''} –ø–æ–ª—É—á–µ–Ω. "
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done_files –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
    )
    return SEND_TASK_STATES['RECEIVE_FILES']

async def done_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ —Ñ–∞–π–ª–æ–≤"""
    if not context.user_data.get('files'):
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª.")
        return SEND_TASK_STATES['RECEIVE_FILES']
    
    await update.message.reply_text(
        "üìé –§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞–Ω–∏—é "
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip_comment —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)."
    )
    return SEND_TASK_STATES['RECEIVE_COMMENT']

async def receive_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞–Ω–∏—é"""
    context.user_data['comment'] = update.message.text
    await finish_task_submission(update, context)
    return ConversationHandler.END

async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    context.user_data['comment'] = "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
    await finish_task_submission(update, context)
    return ConversationHandler.END

async def finish_task_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    user = find_user(user_id)
    deadline_idx = context.user_data.get('selected_deadline_idx')
    
    if (deadline_idx is None or user_id not in user_homeworks or 
        deadline_idx >= len(user_homeworks[user_id])):
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    task = user_homeworks[user_id][deadline_idx]
    deadline_str = task['deadline']
    
    try:
        deadline = datetime.strptime(deadline_str, "%d.%m.%Y %H:%M")
        submitted_at = datetime.now()
        on_time = submitted_at <= deadline
    except ValueError:
        on_time = False
    
    if user_id not in submitted_tasks:
        submitted_tasks[user_id] = []
    
    submission_id = f"sub_{datetime.now().timestamp()}"
    submission_data = {
        'submission_id': submission_id,
        'task_id': task['task_id'],
        'files': context.user_data.get('files', []),
        'comment': context.user_data.get('comment', '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'),
        'submitted_at': submitted_at.strftime("%d.%m.%Y %H:%M"),
        'on_time': on_time,
        'student_id': user_id,
        'student_name': user.full_name(),
        'student_username': user.username,
        'deadline': deadline_str,
        'assigned_by': task.get('assigned_by'),
        'status': 'submitted',
        'review': None
    }
    
    submitted_tasks[user_id].append(submission_data)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    del user_homeworks[user_id][deadline_idx]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω—Ç–æ—Ä–∞ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    mentor_id = user.mentor_id
    if mentor_id:
        await notify_mentor_about_submission(mentor_id, submission_data)
    
    if ADMIN_ID and ADMIN_ID != mentor_id:
        await notify_admin_about_submission(submission_data)
    
    await update.message.reply_text(
        "‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É.\n"
        "–ú–µ–Ω—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –æ—Ç–∑—ã–≤."
    )
    return ConversationHandler.END

async def notify_mentor_about_submission(mentor_id, submission_data):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞ –æ —Å–¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏"""
    try:
        bot = ApplicationBuilder().token(TOKEN).build().bot
        mentor = find_user(mentor_id)
        if not mentor:
            return
        
        student = find_user(submission_data['student_id'])
        if not student:
            return
        
        deadline_status = "‚úÖ –£—Å–ø–µ–ª –≤ —Å—Ä–æ–∫" if submission_data['on_time'] else "‚ùå –û–ø–æ–∑–¥–∞–ª"
        
        message_text = (
            f"üì¨ –ù–æ–≤–æ–µ —Å–¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ —É—á–µ–Ω–∏–∫–∞!\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {student.full_name()}\n"
            f"üìõ Username: @{student.username if student.username else '–Ω–µ—Ç'}\n"
            f"üÜî ID: {student.chat_id}\n"
            f"üìÖ –î–µ–¥–ª–∞–π–Ω: {format_deadline(submission_data['deadline'])}\n"
            f"üì© –°–¥–∞–Ω–æ: {format_deadline(submission_data['submitted_at'])}\n"
            f"üïí –°—Ç–∞—Ç—É—Å: {deadline_status}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {submission_data['comment']}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /review_tasks —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ."
        )
        
        await bot.send_message(mentor_id, message_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –º–µ–Ω—Ç–æ—Ä—É
        for file_info in submission_data.get('files', []):
            if file_info['type'] == 'photo':
                await bot.send_photo(mentor_id, photo=file_info['id'])
            elif file_info['type'] == 'document':
                await bot.send_document(
                    mentor_id,
                    document=file_info['id'],
                    filename=file_info.get('name')
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä—É: {e}")

async def notify_admin_about_submission(submission_data):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Å–¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏"""
    if ADMIN_ID is None:
        return
    
    try:
        bot = ApplicationBuilder().token(TOKEN).build().bot
        student = find_user(submission_data['student_id'])
        if not student:
            return
        
        mentor = find_user(student.mentor_id) if student.mentor_id else None
        deadline_status = "‚úÖ –£—Å–ø–µ–ª –≤ —Å—Ä–æ–∫" if submission_data['on_time'] else "‚ùå –û–ø–æ–∑–¥–∞–ª"
        
        message_text = (
            f"üì¨ –ù–æ–≤–æ–µ —Å–¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {student.full_name()}\n"
            f"üìõ Username: @{student.username if student.username else '–Ω–µ—Ç'}\n"
            f"üÜî ID: {student.chat_id}\n"
            f"üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä: {mentor.full_name() if mentor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
            f"üìÖ –î–µ–¥–ª–∞–π–Ω: {format_deadline(submission_data['deadline'])}\n"
            f"üì© –°–¥–∞–Ω–æ: {format_deadline(submission_data['submitted_at'])}\n"
            f"üïí –°—Ç–∞—Ç—É—Å: {deadline_status}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {submission_data['comment']}"
        )
        
        await bot.send_message(ADMIN_ID, message_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for file_info in submission_data.get('files', []):
            if file_info['type'] == 'photo':
                await bot.send_photo(ADMIN_ID, photo=file_info['id'])
            elif file_info['type'] == 'document':
                await bot.send_document(
                    ADMIN_ID,
                    document=file_info['id'],
                    filename=file_info.get('name')
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# ========== –ü–†–û–í–ï–†–ö–ê –ó–ê–î–ê–ù–ò–ô –ú–ï–ù–¢–û–†–û–ú ==========

async def review_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π"""
    user = find_user(update.effective_user.id)
    if not user or user.role not in ['admin', 'mentor']:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    # –î–ª—è –º–µ–Ω—Ç–æ—Ä–∞ - —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏—è –µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤
    if user.role == 'mentor':
        student_ids = [s.chat_id for s in get_students_for_mentor(user.chat_id)]
        submissions = []
        for student_id in student_ids:
            if student_id in submitted_tasks:
                for task in submitted_tasks[student_id]:
                    if task.get('status') == 'submitted':
                        submissions.append((student_id, task))
    else:  # admin - –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
        submissions = []
        for student_id, tasks in submitted_tasks.items():
            for task in tasks:
                if task.get('status') == 'submitted':
                    submissions.append((student_id, task))
    
    if not submissions:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['submissions_to_review'] = submissions
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
    keyboard = []
    for idx, (student_id, task) in enumerate(submissions, 1):
        student = find_user(student_id)
        if not student:
            continue
        
        deadline_status = "‚úÖ –í —Å—Ä–æ–∫" if task['on_time'] else "‚ùå –û–ø–æ–∑–¥–∞–Ω–∏–µ"
        btn_text = (
            f"{idx}. {student.full_name()} - "
            f"{format_deadline(task['deadline'])} "
            f"({deadline_status})"
        )
        
        keyboard.append([
            InlineKeyboardButton(
                btn_text,
                callback_data=f"{REVIEW_PREFIX}{idx-1}"
            )
        ])
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
        "‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return REVIEW_STATES['SELECT_SUBMISSION']

async def select_submission_for_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    submission_idx = int(query.data[len(REVIEW_PREFIX):])
    submissions = context.user_data.get('submissions_to_review')
    
    if not submissions or submission_idx >= len(submissions):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END
    
    student_id, submission = submissions[submission_idx]
    student = find_user(student_id)
    if not student:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏
    context.user_data['current_submission'] = submission
    context.user_data['current_submission_idx'] = submission_idx
    context.user_data['student_id'] = student_id
    
    deadline_status = "‚úÖ –°–¥–∞–Ω–æ –≤ —Å—Ä–æ–∫" if submission['on_time'] else "‚ùå –°–¥–∞–Ω–æ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º"
    
    message_text = (
        f"üìù –ó–∞–¥–∞–Ω–∏–µ –æ—Ç: {student.full_name()}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {format_deadline(submission['deadline'])}\n"
        f"üì© –°–¥–∞–Ω–æ: {format_deadline(submission['submitted_at'])}\n"
        f"üïí –°—Ç–∞—Ç—É—Å: {deadline_status}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–µ–Ω–∏–∫–∞: {submission['comment']}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏):"
    )
    
    await query.edit_message_text(message_text)
    return REVIEW_STATES['RECEIVE_REVIEW']

async def receive_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –º–µ–Ω—Ç–æ—Ä–∞"""
    submission = context.user_data.get('current_submission')
    student_id = context.user_data.get('student_id')
    reviewer_id = update.effective_user.id
    
    if not submission or not student_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    review_data = {
        'reviewer_id': reviewer_id,
        'reviewed_at': datetime.now().strftime("%d.%m.%Y %H:%M"),
        'status': 'reviewed'
    }
    
    if update.message.text:
        review_data['text'] = update.message.text
    elif update.message.document:
        review_data['file'] = {
            'file_id': update.message.document.file_id,
            'file_name': update.message.document.file_name,
            'file_type': 'document'
        }
    elif update.message.photo:
        review_data['file'] = {
            'file_id': update.message.photo[-1].file_id,
            'file_type': 'photo'
        }
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–æ–º.")
        return REVIEW_STATES['RECEIVE_REVIEW']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
    submission.update(review_data)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
    await notify_student_about_review(student_id, submission, reviewer_id)
    
    await update.message.reply_text("‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–µ–Ω–∏–∫—É!")
    return ConversationHandler.END

async def notify_student_about_review(student_id, submission, reviewer_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –æ—Ç–∑—ã–≤–µ"""
    try:
        bot = ApplicationBuilder().token(TOKEN).build().bot
        reviewer = find_user(reviewer_id)
        if not reviewer:
            return
        
        message_text = (
            f"üìù –í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç {reviewer.full_name()}!\n"
            f"üìÖ –î–µ–¥–ª–∞–π–Ω: {format_deadline(submission['deadline'])}\n"
            f"üì© –°–¥–∞–Ω–æ: {format_deadline(submission['submitted_at'])}\n\n"
        )
        
        if 'text' in submission:
            message_text += f"üí¨ –û—Ç–∑—ã–≤:\n{submission['text']}"
            await bot.send_message(student_id, message_text)
        elif 'file' in submission:
            message_text += "üìé –§–∞–π–ª —Å –æ—Ç–∑—ã–≤–æ–º:"
            await bot.send_message(student_id, message_text)
            
            file_info = submission['file']
            if file_info['file_type'] == 'document':
                await bot.send_document(
                    student_id,
                    document=file_info['file_id'],
                    filename=file_info.get('file_name')
                )
            else:
                await bot.send_photo(student_id, photo=file_info['file_id'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ —É—á–µ–Ω–∏–∫—É: {e}")

# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ==========

async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    active_users = get_active_users()
    if not active_users:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    keyboard = [
        [InlineKeyboardButton(
            f"{u.full_name()} ({u.role})",
            callback_data=f"{DELETE_PREFIX}{u.chat_id}"
        )]
        for u in active_users  # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    ]
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def delete_user_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data[len(DELETE_PREFIX):])
    current_user_id = query.from_user.id
    user = find_user(user_id)
    
    if not user:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
    if user_id == current_user_id:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    user.is_active = False
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            user_id,
            "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register."
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name()} ({user.role}) —É–¥–∞–ª–µ–Ω.")

async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    active_users = get_active_users()
    if not active_users:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    users_list = []
    for user in active_users:
        mentor_info = ""
        if user.role == 'student' and user.mentor_id:
            mentor = find_user(user.mentor_id)
            mentor_info = f" | –ú–µ–Ω—Ç–æ—Ä: {mentor.full_name() if mentor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}"
        
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        username = f" (@{user.username})" if user.username else ""
        
        users_list.append(
            f"üë§ {user.full_name()}{username} "
            f"({user.role.capitalize()}, ID: {user.chat_id}{mentor_info}) - {status}"
        )
    
    await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(users_list))

async def show_my_students(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –º–µ–Ω—Ç–æ—Ä–∞"""
    mentor_id = update.effective_user.id
    mentor = find_user(mentor_id)
    
    if not mentor or mentor.role != 'mentor':
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä–∞–º.")
        return
    
    students = get_students_for_mentor(mentor_id)
    
    if not students:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
        return
    
    students_list = []
    for idx, student in enumerate(students, 1):
        active_hw = len(user_homeworks.get(student.chat_id, []))
        submitted_hw = len(submitted_tasks.get(student.chat_id, []))
        
        username = f" (@{student.username})" if student.username else ""
        students_list.append(
            f"{idx}. {student.full_name()}{username}\n"
            f"   üÜî ID: {student.chat_id}\n"
            f"   üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {active_hw}\n"
            f"   üì© –°–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {submitted_hw}"
        )
    
    await update.message.reply_text(f"üìã –í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:\n\n" + "\n\n".join(students_list))

# ========== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==========

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('register', register_start)],
        states={
            REGISTER_STATES['NAME']: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
            REGISTER_STATES['FAMILY_NAME']: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_family_name)],
            REGISTER_STATES['WAIT_APPROVAL']: [
                CallbackQueryHandler(
                    approve_registration, 
                    pattern=f"^({APPROVE_PREFIX}|{REJECT_PREFIX})"
                )
            ]
        },
        fallbacks=[CommandHandler('cancel', register_user_cancel)],
        per_message=False,
        per_chat=True,
        per_user=True
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    assign_hw_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('assign_homework', assign_homework)],
        states={
            ASSIGN_HW_STATES['SELECT_STUDENT']: [
                CallbackQueryHandler(
                    select_student_for_homework,
                    pattern=f"^{ASSIGN_HW_PREFIX}\\d+$"
                )
            ],
            ASSIGN_HW_STATES['RECEIVE_FILE']: [
                MessageHandler(
                    filters.Document.ALL | filters.PHOTO | filters.TEXT & ~filters.COMMAND,
                    receive_homework_file
                )
            ],
            ASSIGN_HW_STATES['RECEIVE_DEADLINE']: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    receive_homework_deadline
                )
            ]
        },
        fallbacks=[CommandHandler('cancel', register_user_cancel)],
        per_message=False,
        per_chat=True,
        per_user=True
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è
    send_task_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('send_task', send_task_start)],
        states={
            SEND_TASK_STATES['SELECT_DEADLINE']: [
                CallbackQueryHandler(
                    select_deadline,
                    pattern=r'^deadline_\d+$'
                )
            ],
            SEND_TASK_STATES['RECEIVE_FILES']: [
                MessageHandler(
                    filters.Document.ALL | filters.PHOTO,
                    receive_files
                ),
                CommandHandler('done_files', done_files)
            ],
            SEND_TASK_STATES['RECEIVE_COMMENT']: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    receive_comment
                ),
                CommandHandler('skip_comment', skip_comment)
            ]
        },
        fallbacks=[CommandHandler('cancel', register_user_cancel)],
        per_message=False,
        per_chat=True,
        per_user=True
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π
    review_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('review_tasks', review_tasks)],
        states={
            REVIEW_STATES['SELECT_SUBMISSION']: [
                CallbackQueryHandler(
                    select_submission_for_review,
                    pattern=f"^{REVIEW_PREFIX}\\d+$"
                )
            ],
            REVIEW_STATES['RECEIVE_REVIEW']: [
                MessageHandler(
                    filters.TEXT | filters.Document.ALL | filters.PHOTO,
                    receive_review
                )
            ]
        },
        fallbacks=[CommandHandler('cancel', register_user_cancel)],
        per_message=False,
        per_chat=True,
        per_user=True
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('show_deadlines', show_deadlines))
    app.add_handler(CommandHandler('show_users', show_users))
    app.add_handler(CommandHandler('delete_user', delete_user))
    app.add_handler(CommandHandler('show_my_students', show_my_students))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CallbackQueryHandler(assign_role, pattern=f"^{ROLE_PREFIX}"))
    app.add_handler(CallbackQueryHandler(assign_mentor, pattern=f"^{MENTOR_PREFIX}"))
    app.add_handler(CallbackQueryHandler(delete_user_confirmation, pattern=f"^{DELETE_PREFIX}"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConversationHandler
    app.add_handler(reg_conv_handler)
    app.add_handler(assign_hw_conv_handler)
    app.add_handler(send_task_conv_handler)
    app.add_handler(review_conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == '__main__':
    main()